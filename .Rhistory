ETP_D = rnorm(nsynth, ETP_D_m, 0.2)  #PET in mm/day, Turc 1961
ETP_M <- ETP_D * 30  #mm/month
#Actual ET
ETA_var = rnorm(nsynth, 1, 0.2) #This noise parmeter limits ETA<CMP_mm but allows variation around ETP, as observed
ETA = CMP_mm*3 * (1 / (sqrt(1 + (1 / ((ETP_M / (CMP_mm*3)) * ETA_var)) ^ 2))) #AET in mm/month from Budyko curve
#here scaled eta to quarter precip, assuming potential carry-over
#Free air porosity
#Have updated, now scales volumetrically w/ excess precipitation relative to pore space
FAP <- pmin((pores - (CMP_mm - ETA)/(L*10*pores)), pores)
FAP = pmax(FAP,0.01) #dimensionless
#CO2 Diffusion coefficients
DIFC = FAP * tort * 0.1369 * (CQT_K / 273.15) ^ 1.958
#Water limitation of discriminaton, Diefendorf
W_m <- 22.65 - (1.2 * (MAP + 975)) / (27.2 + 0.04 * (MAP + 975))
W = rnorm(nsynth, W_m, 0.5)
#CO2 effect on discrimination, Schubert
deltaP_pCO2_m <- 28.26 * 0.35 * (pCO2 + 15) / (28.26 + 0.35 * (pCO2 + 15))
deltaP_pCO2 = rnorm(nsynth, deltaP_pCO2_m, 0.5)
#Discrimination
deltaP <- deltaA - (deltaP_pCO2 - W)
#Soil CO2 C isotopes
deltaA_hat <- (deltaA / 1000 + 1) * RC.vpdb / (1 + RC.vpdb * (deltaA / 1000 + 1))
deltaP_hat <- (deltaP / 1000 + 1) * RC.vpdb / (1 + RC.vpdb * (deltaP / 1000 + 1))
dC_Soil.resp = R_sec/(DIFC) * (L * z - z^2 / 2)
dC_Soil.num = dC_Soil.resp * DIF.ratio * deltaP_hat + pCO2_mcc * deltaA_hat
dC_Soil.denom = dC_Soil.resp * (1 - DIF.ratio * deltaP_hat) + pCO2_mcc * (1 - deltaA_hat)
dC_Soil = (dC_Soil.num / (dC_Soil.denom * RC.vpdb) - 1) * 1000
#Soil carbonate C isotopes
A_CO2_Carb <- 2.71828 ^ (-2.988e3 / CQT_K ^ 2 + 7.6663 / CQT_K - 0.0024612)
R_Soil <- (dC_Soil / 1000 + 1) * RC.vpdb
R_Carb <- R_Soil / A_CO2_Carb
#Soil water evaporation, now beta dist
e_mean = 0.06  #evap is 6% of total ET
e_var = 0.04^2
size = e_mean*(1-e_mean)/e_var - 1
alpha = e_mean * size
beta = (1-e_mean) * size
E = rbeta(nsynth, alpha, beta) * ETA #mm/month
E = pmax(E, 1) #mm/month
#Soil water diffusion evaporation balance
E_s <- E / (1000 * 30 * 24 * 3600) #evaporation in m/sec
DIFO <- 1.637e-8 * (CQT_K / 216.25 - 1) ^ 2.074 * (pores - FAP) * tort   ## should be soil water fraction,
## pores - FAP. units: m2/sec. However, the the paper assumes total saturation, where FAP = 0
z_i <- DIFO / E_s #mean penetration depth of evap, in m
#Soil water O isotopes
DRF <- 1 + 0.8 * (1 / 0.9723 - 1)
R_O_surface <- ((1 - h) * DRF * R_O_P + h * R_O_atm) / (1 / A_atmP)
R_O_soil <- ((R_O_surface - R_O_P) * 2.71828 ^ (-z_m / z_i)) + R_O_P
R_O_soil = R_O_soil * esw + R_O_P * (1 - esw)  #soil water is esw % evaporated fraction
dO_soil <- (R_O_soil/RO.vsmow - 1) * 1000
#Soil carbonate O isotopes
A_O <- 2.71828 ^ ((2.78e6 / CQT_K ^ 2 - 2.89) / 1000)
R_O_Carb <- R_O_soil * A_O
dC_Carb <- (R_Carb / RC.vpdb - 1) * 1000
dO_Carb <- (R_O_Carb / RO.vpdb - 1) * 1000
dat = c(median(z), median(dO_soil), median(dO_P), median(dC_Carb), median(dO_Carb))
return(dat)
}
hq_pred = data.frame(depth=numeric(0), soil18O=numeric(0), dO_P=numeric(0), d13C=numeric(0), d18O=numeric(0))
for(i in 1: nrow(sites)){
hq_pred[i,] = sm_forward_evap(sites$map.wc[i], sites$mat.wc[i], sites$hqp.frac[i], sites$hqt.offset[i], 280)
}
hq_pred$Site = sites$Site
hq.comp = merge.data.frame(hq_pred, data.aves, by.x = "Site", by.y = "Group.1", all.x=TRUE)
## Plots w/ MAP colors
hq.comp = merge.data.frame(hq.comp, sites, by.x = "Site", by.y = "Site", all.x=TRUE)
View(dq.comp)
View(hq.comp)
#extract relevant values at sites
rawsites = read.xlsx("modern_comparison.xlsx", sheetIndex = 1)
library(xlsx)
#extract relevant values at sites
rawsites = read.xlsx("modern_comparison.xlsx", sheetIndex = 1)
View(rawsites)
#extract relevant values at sites
rawsites = read.xlsx("modern_comparison.xlsx", sheetIndex = 3)
View(rawsites)
## Subset of sites that have depth information - matching them with the depth that is closest (w/in 10 cm) of the model estimated depths
depth = dataframe(d13CD = numeric(0), d18OD = numeric(0))
## Subset of sites that have depth information - matching them with the depth that is closest (w/in 10 cm) of the model estimated depths
depth = data.frame(d13CD = numeric(0), d18OD = numeric(0))
View(depth)
for(i in 1:nrow(sites)) {
for(j in 1:nrow(rawsites)){
if(inside.range(sites[i,2], c(rawsites[j,3] - 10, rawsites[j,3] + 10)) && sites$Site = rawsites$Site)
{depth[i,1] = rawsites[j,4]
depth[i,2] = rawsites[j,5]
}
for(i in 1:nrow(sites)) {
for(j in 1:nrow(rawsites)){
if(inside.range(sites[i,2], c(rawsites[j,3] - 10, rawsites[j,3] + 10)) && sites$Site == rawsites$Site)
{depth[i,1] = rawsites[j,4]
depth[i,2] = rawsites[j,5]
}
}}
for(i in 1:nrow(sites)) {
for(j in 1:nrow(rawsites)){
if(sites[i,2] > rawsites[j,3] - 10 && sites[i,2] < rawsites[j,3] + 10 && sites$Site == rawsites$Site)
{depth[i,1] = rawsites[j,4]
depth[i,2] = rawsites[j,5]
}
}}
for(i in 1:nrow(sites)) {
for(j in 1:nrow(rawsites)){
if(sites[i,2] > (rawsites[j,3] - 10) && sites[i,2] < (rawsites[j,3] + 10) && sites$Site == rawsites$Site)
{depth[i,1] = rawsites[j,4]
depth[i,2] = rawsites[j,5]
}
}}
View(sites)
for(i in 1:nrow(sites)) {
for(j in 1:nrow(rawsites)){
if(sites[i,2] > (rawsites[j,3] - 10) && sites[i,2] < (rawsites[j,3] + 10) && identical(sites[i,2], rawsites[j,2]))
{depth[i,1] = rawsites[j,4]
depth[i,2] = rawsites[j,5]
}
}}
warnings()
for(i in 1:nrow(hq.comp)) {
for(j in 1:nrow(rawsites)){
if(sites[i,2] > (rawsites[j,3] - 10) && hq.comp[i,2]< (rawsites[j,3] + 10) && identical(hq.comp[i,1], rawsites[j,2]))
{depth[i,1] = rawsites[j,4]
depth[i,2] = rawsites[j,5]
}
}}
warnings()
for(i in 1:nrow(hq.comp)) {
for(j in 1:nrow(rawsites)){
if(hq.comp[i,2] > (rawsites[j,3] - 10) && hq.comp[i,2]< (rawsites[j,3] + 10) && identical(hq.comp[i,1], rawsites[j,2]))
{depth[i,1] = rawsites[j,4]
depth[i,2] = rawsites[j,5]
}
}}
View(depth)
for(i in 1:nrow(hq.comp)) {
for(j in 1:nrow(rawsites)){
if(hq.comp[i,2] > (rawsites[j,3] - 10) && hq.comp[i,2] < (rawsites[j,3] + 10) && identical(hq.comp[i,1], rawsites[j,2]))
{depth[i,1] = rawsites[j,4]
depth[i,2] = rawsites[j,5]}
}}
View(depth)
for(i in 1:nrow(hq.comp)) {
for(j in 1:nrow(rawsites)){
if(hq.comp[i,2] > (rawsites[j,3] - 10) && hq.comp[i,2] < (rawsites[j,3] + 10) && identical(hq.comp[i,1], rawsites[j,2]))
{depthCO = data.frame(d13C=rawsites[j,4], d18O=rawsites[j,5])
depth = rbind(depth, depthCO)}
}}
View(depth)
## Subset of sites that have depth information - matching them with the depth that is closest (w/in 10 cm) of the model estimated depths
depth = data.frame(site="", d13CD = numeric(0), d18OD = numeric(0))
## Subset of sites that have depth information - matching them with the depth that is closest (w/in 10 cm) of the model estimated depths
depth = data.frame(site, d13CD = numeric(0), d18OD = numeric(0))
## Subset of sites that have depth information - matching them with the depth that is closest (w/in 10 cm) of the model estimated depths
depth = data.frame(site=numeric(0), d13CD = numeric(0), d18OD = numeric(0))
depth = data.frame(site=numeric(0), d13CD = numeric(0), d18OD = numeric(0))
for(i in 1:nrow(hq.comp)) {
for(j in 1:nrow(rawsites)){
if(hq.comp[i,2] > (rawsites[j,3] - 10) && hq.comp[i,2] < (rawsites[j,3] + 10) && identical(hq.comp[i,1], rawsites[j,2]))
{depthCO = data.frame(site=rawsites[j,2],d13C=rawsites[j,4], d18O=rawsites[j,5])
depth = rbind(depth, depthCO)}
}}
View(depth)
rawsites[1,3] - 10
rawsites[1,3] + 10
hq.comp[1,2]
identical(hq.comp[3,1], rawsites[209,2])
hq.comp[3,1]
rawsites[209,2]
c(hq.comp[3,1])
"hq.comp[3,1]"
as.name(rawsites[209,2])
as.numeric(rawsites[209,2])
as.character(rawsites[209,2])
identical(as.character(hq.comp[3,1]), as.character(rawsites[209,2]))
for(i in 1:nrow(hq.comp)) {
for(j in 1:nrow(rawsites)){
if(hq.comp[i,2] > (rawsites[j,3] - 10) && hq.comp[i,2] < (rawsites[j,3] + 10) && identical(as.character(hq.comp[i,1]), as.character(rawsites[j,2])))
{depthCO = data.frame(site=rawsites[j,2],d13C=rawsites[j,4], d18O=rawsites[j,5])
depth = rbind(depth, depthCO)}
}}
for(i in 1:nrow(hq.comp)) {
for(j in 1:nrow(rawsites)){
if(hq.comp[i,2] > rawsites[j,3] - 10 && hq.comp[i,2] < rawsites[j,3] + 10 && identical(as.character(hq.comp[i,1]), as.character(rawsites[j,2])))
{depthCO = data.frame(site=rawsites[j,2],d13C=rawsites[j,4], d18O=rawsites[j,5])
depth = rbind(depth, depthCO)}
}}
##
?&&
##
#run this for only the not superarid ones
sites = read.csv("valsites_sel.csv")
?'&&'
for(i in 1:nrow(hq.comp)) {
for(j in 1:nrow(rawsites)){
if(identical(as.character(hq.comp[i,1]), as.character(rawsites[j,2])) && hq.comp[i,2] > rawsites[j,3] - 10 && hq.comp[i,2] < rawsites[j,3] + 10)
{depthCO = data.frame(site=rawsites[j,2],d13C=rawsites[j,4], d18O=rawsites[j,5])
depth = rbind(depth, depthCO)}
}}
for(i in 1:nrow(hq.comp)) {
for(j in 1:nrow(rawsites)){
if(identical(as.character(hq.comp[i,1]), as.character(rawsites[j,2])))
{depthCO = data.frame(site=rawsites[j,2],d13C=rawsites[j,4], d18O=rawsites[j,5])
depth = rbind(depth, depthCO)}
}}
View(depth)
for(i in 1:nrow(hq.comp)) {
for(j in 1:nrow(rawsites)){
if(identical(as.character(hq.comp[i,1]), as.character(rawsites[j,2])) && hq.comp[i,2] > rawsites[j,3] - 10 && hq.comp[i,2] < rawsites[j,3] + 10)
{depthCO = data.frame(site=rawsites[j,2],d13C=rawsites[j,4], d18O=rawsites[j,5])
depth = rbind(depth, depthCO)}
}}
depth = data.frame(site=numeric(0), d13CD = numeric(0), d18OD = numeric(0))
for(i in 1:nrow(hq.comp)) {
for(j in 1:nrow(rawsites)){
if(identical(as.character(hq.comp[i,1]), as.character(rawsites[j,2])) && hq.comp[i,2] > rawsites[j,3] - 10)
{depthCO = data.frame(site=rawsites[j,2],d13C=rawsites[j,4], d18O=rawsites[j,5])
depth = rbind(depth, depthCO)}
}}
for(i in 1:nrow(hq.comp)) {
for(j in 1:nrow(rawsites)){
if(identical(as.character(hq.comp[i,1]), as.character(rawsites[j,2])) && hq.comp[i,2] > rawsites[j,3])
{depthCO = data.frame(site=rawsites[j,2],d13C=rawsites[j,4], d18O=rawsites[j,5])
depth = rbind(depth, depthCO)}
}}
for(i in 1:nrow(hq.comp)) {
for(j in 1:nrow(rawsites)){
if( hq.comp[i,2] > rawsites[j,3])
{depthCO = data.frame(site=rawsites[j,2],d13C=rawsites[j,4], d18O=rawsites[j,5])
depth = rbind(depth, depthCO)}
}}
for(i in 1:nrow(hq.comp)) {
for(j in 1:nrow(rawsites)){
if(hq.comp[i,2] >= rawsites[j,3])
{depthCO = data.frame(site=rawsites[j,2],d13C=rawsites[j,4], d18O=rawsites[j,5])
depth = rbind(depth, depthCO)}
}}
identical(as.character(hq.comp[i,1]), as.character(rawsites[j,2])) &&
hq.comp[1,2]
rawsites[1,3]
identical(as.character(hq.comp[i,1]), as.character(rawsites[j,2])) &&
hq.comp[1,2]
hq.comp[1,2]
rawsites[1,3]
if( hq.comp[1,2] > rawsites[1,3]){paste("works")}
?is.na
?is.numeric
depth = data.frame(site=numeric(0), d13CD = numeric(0), d18OD = numeric(0))
for(i in 1:nrow(hq.comp)) {
for(j in 1:nrow(rawsites)){
if(identical(as.character(hq.comp[i,1]), as.character(rawsites[j,2])) && is.numeric(rawsites[j,3]) && hq.comp[i,2] > rawsites[j,3] - 10 && hq.comp[i,2] < rawsites[j,3] + 10)
{depthCO = data.frame(site=rawsites[j,2],d13C=rawsites[j,4], d18O=rawsites[j,5])
depth = rbind(depth, depthCO)}
}}
is.numeric(NA)
depth = data.frame(site=numeric(0), d13CD = numeric(0), d18OD = numeric(0))
for(i in 1:nrow(hq.comp)) {
for(j in 1:nrow(rawsites)){
if(identical(as.character(hq.comp[i,1]), as.character(rawsites[j,2])) && is.numeric(rawsites[j,3]))
{depthCO = data.frame(site=rawsites[j,2],d13C=rawsites[j,4], d18O=rawsites[j,5])
depth = rbind(depth, depthCO)}
}}
View(depth)
depth = data.frame(site=numeric(0), d13CD = numeric(0), d18OD = numeric(0))
for(i in 1:nrow(hq.comp)) {
for(j in 1:nrow(rawsites)){
if(identical(as.character(hq.comp[i,1]), as.character(rawsites[j,2])) && is.na(rawsites[j,3]) = F && hq.comp[i,2] > rawsites[j,3] - 10 && hq.comp[i,2] < rawsites[j,3] + 10)
{depthCO = data.frame(site=rawsites[j,2],d13C=rawsites[j,4], d18O=rawsites[j,5])
depth = rbind(depth, depthCO)}
}}
depth = data.frame(site=numeric(0), d13CD = numeric(0), d18OD = numeric(0))
for(i in 1:nrow(hq.comp)) {
for(j in 1:nrow(rawsites)){
if(identical(as.character(hq.comp[i,1]), as.character(rawsites[j,2])) && is.na(rawsites[j,3]) == F && hq.comp[i,2] > rawsites[j,3] - 10 && hq.comp[i,2] < rawsites[j,3] + 10)
{depthCO = data.frame(site=rawsites[j,2],d13C=rawsites[j,4], d18O=rawsites[j,5])
depth = rbind(depth, depthCO)}
}}
View(depth)
depth = data.frame(site=numeric(0), depthM = numeric(0), depthObs = numeric(0), d13CD = numeric(0), d18OD = numeric(0))
for(i in 1:nrow(hq.comp)) {
for(j in 1:nrow(rawsites)){
if(identical(as.character(hq.comp[i,1]), as.character(rawsites[j,2])) && is.na(rawsites[j,3]) == F && hq.comp[i,2] > rawsites[j,3] - 10 && hq.comp[i,2] < rawsites[j,3] + 10)
{depthCO = data.frame(site=rawsites[j,2], depthM = hq.comp[i,2], depthObs = rawsites[j,3], d13C=rawsites[j,4], d18O=rawsites[j,5])
depth = rbind(depth, depthCO)}
}}
View(depth)
depth = data.frame(site=numeric(0), depthM = numeric(0), depthObs = numeric(0), d13CD = numeric(0), d18OD = numeric(0))
for(i in 1:nrow(hq.comp)) {
for(j in 1:nrow(rawsites)){
if(identical(as.character(hq.comp[i,1]), as.character(rawsites[j,2])) && is.na(rawsites[j,3]) == F && hq.comp[i,2] > rawsites[j,3] - 10 && hq.comp[i,2] < rawsites[j,3] + 10)
{depthCO = data.frame(site=rawsites[j,2], depthM = hq.comp[i,2], depthObs = rawsites[j,3], d13C_measured=rawsites[j,4], d18O_measured=rawsites[j,5])
depth = rbind(depth, depthCO)}
}}
## Average each site
depth.aves = aggregate.data.frame(depth, list(depth$Site), mean, simplify = TRUE)
?aggregate.data.frame
## Average each site
depth.aves = aggregate.data.frame(depth, list(depth$site), mean, simplify = TRUE)
warnings()
View(depth.aves)
depth.aves$site=NULL
?merge.data.frame
# Add other data
depth <- merge.data.frame(depth.aves, hq.comp, by.x = "Group.1", by.y = "Site")
View(depth)
View(sites)
View(sites)
sites = read.xlsx("modern_comparison.xlsx", sheetIndex = 2)
coords = matrix(c(sites$Lon, sites$Lat),nrow(sites),2)
sites$mat.wc = extract(mat, coords)
sites$map.wc = extract(map, coords)
sites$hqt.offset = extract(hqt.offset, coords)
sites$hqp.frac = extract(hqp.frac, coords)
sites$dqt.offset = extract(dqt.offset, coords)
sites$dqp.frac = extract(dqp.frac, coords)
load("~/GitHub/soilCCModern/.RData")
View(sites)
# Add other data
sites.depth <- merge.data.frame(depth.aves, sites, by.x = "Group.1", by.y = "Site")
View(sites.depth)
hq_depth_pred = data.frame(depth=numeric(0), soil18O=numeric(0), dO_P=numeric(0), d13C=numeric(0), d18O=numeric(0))
for(i in 1: nrow(sites.depth)){
hq_pred[i,] = sm_forward_evap(sites.depth$map.wc[i], sites.depth$mat.wc[i], sites.depth$hqp.frac[i], sites.depth$hqt.offset[i], 280)
}
hq_pred$Site = sites.depth$Site
## w/ evap
hq_depth_pred = data.frame(depth=numeric(0), soil18O=numeric(0), dO_P=numeric(0), d13C=numeric(0), d18O=numeric(0))
for(i in 1: nrow(sites)){
dq_pred[i,] = sm_forward_evap(sites$map.wc[i], sites$mat.wc[i], sites$dqp.frac[i], sites$dqt.offset[i], 280)
}
for(i in 1: nrow(sites.depth)){
hq_pred[i,] = sm_forward_evap(sites.depth$map.wc[i], sites.depth$mat.wc[i], sites.depth$hqp.frac[i], sites.depth$hqt.offset[i], 280)
}
View(hq_pred)
View(sites.depth)
hq_depth_pred = data.frame(depth=numeric(0), soil18O=numeric(0), dO_P=numeric(0), d13C=numeric(0), d18O=numeric(0))
for(i in 1: nrow(sites.depth)){
hq_depth_pred[i,] = sm_forward_evap(sites.depth$map.wc[i], sites.depth$mat.wc[i], sites.depth$hqp.frac[i], sites.depth$hqt.offset[i], 280)
}
hq_pred$Site = sites.depth$Site
View(hq_depth_pred)
dq_pred.depth = data.frame(depth=numeric(0), soil18O=numeric(0), dO_P=numeric(0),d13C=numeric(0), d18O=numeric(0))
for(i in 1: nrow(sites.depth)){
dq_pred.depth[i,] = sm_forward_evap(sites.depth$map.wc[i], sites.depth$mat.wc[i], sites.depth$dqp.frac[i], sites.depth$dqt.offset[i], 280)
}
dq_pred.depth$Site = sites.depth$Site
layout(matrix(c(1,2,3,4), 2, 2, byrow=T))
hq.comp.depth = merge.data.frame(hq_pred.depth, data.aves, by.x = "Site", by.y = "Group.1", all.x=TRUE)
plot(hq.comp.depth$d13C, hq.comp.depth$d13C_measured)
abline(0,1)
plot(hq.comp.depth$d18O, hq.comp.depth$d18O_measured)
abline(0,1)
dq.comp.depth = merge.data.frame(dq_pred.depth, data.aves, by.x = "Site", by.y = "Group.1")
plot(dq.comp.depth$d13C, dq.comp.depth$d13C_measured)
abline(0,1)
plot(dq.comp.depth$d18O, dq.comp.depth$d18O_measured)
abline(0,1)
hq_pred.depth = data.frame(depth=numeric(0), soil18O=numeric(0), dO_P=numeric(0), d13C=numeric(0), d18O=numeric(0))
for(i in 1: nrow(sites.depth)){
hq_pred.depth[i,] = sm_forward_evap(sites.depth$map.wc[i], sites.depth$mat.wc[i], sites.depth$hqp.frac[i], sites.depth$hqt.offset[i], 280)
}
hq_pred.depth$Site = sites.depth$Site
dq_pred.depth = data.frame(depth=numeric(0), soil18O=numeric(0), dO_P=numeric(0),d13C=numeric(0), d18O=numeric(0))
for(i in 1: nrow(sites.depth)){
dq_pred.depth[i,] = sm_forward_evap(sites.depth$map.wc[i], sites.depth$mat.wc[i], sites.depth$dqp.frac[i], sites.depth$dqt.offset[i], 280)
}
dq_pred.depth$Site = sites.depth$Site
layout(matrix(c(1,2,3,4), 2, 2, byrow=T))
hq.comp.depth = merge.data.frame(hq_pred.depth, data.aves, by.x = "Site", by.y = "Group.1", all.x=TRUE)
plot(hq.comp.depth$d13C, hq.comp.depth$d13C_measured)
abline(0,1)
plot(hq.comp.depth$d18O, hq.comp.depth$d18O_measured)
abline(0,1)
dq.comp.depth = merge.data.frame(dq_pred.depth, data.aves, by.x = "Site", by.y = "Group.1")
plot(dq.comp.depth$d13C, dq.comp.depth$d13C_measured)
abline(0,1)
plot(dq.comp.depth$d18O, dq.comp.depth$d18O_measured)
abline(0,1)
View(hq_pred.depth)
View(sites.depth)
hq_pred.depth$Site = sites.depth$Group.1
dq_pred.depth$Site = sites.depth$Group.1
layout(matrix(c(1,2,3,4), 2, 2, byrow=T))
hq.comp.depth = merge.data.frame(hq_pred.depth, data.aves, by.x = "Site", by.y = "Group.1", all.x=TRUE)
plot(hq.comp.depth$d13C, hq.comp.depth$d13C_measured)
abline(0,1)
plot(hq.comp.depth$d18O, hq.comp.depth$d18O_measured)
abline(0,1)
dq.comp.depth = merge.data.frame(dq_pred.depth, data.aves, by.x = "Site", by.y = "Group.1")
plot(dq.comp.depth$d13C, dq.comp.depth$d13C_measured)
abline(0,1)
plot(dq.comp.depth$d18O, dq.comp.depth$d18O_measured)
abline(0,1)
View(hq.comp.depth)
hq.comp.depth = merge.data.frame(hq_pred.depth, sites.depth, by.x = "Site", by.y = "Group.1", all.x=TRUE)
plot(hq.comp.depth$d13C, hq.comp.depth$d13C_measured)
abline(0,1)
plot(hq.comp.depth$d18O, hq.comp.depth$d18O_measured)
abline(0,1)
dq.comp.depth = merge.data.frame(dq_pred.depth, sites.depth, by.x = "Site", by.y = "Group.1")
plot(dq.comp.depth$d13C, dq.comp.depth$d13C_measured)
abline(0,1)
plot(dq.comp.depth$d18O, dq.comp.depth$d18O_measured)
abline(0,1)
#extract relevant values at sites
precipcomp <- read.csv("valsites_sel_d18O_P.csv")
View(precipcomp)
## Compare dO_P from OIPC and model
plot(precipcomp$d18O_Model ~ precipcomp$d18O_OIPC)
abline(0,1)
## Compare dO_P from OIPC and model
plot(precipcomp$d18O_Model ~ precipcomp$d18O_OIPC, xlim=c(-4, -18), ylim=c(-4, -18))
## Compare dO_P from OIPC and model
plot(precipcomp$d18O_Model ~ precipcomp$d18O_OIPC, xlim=c(-18, -3), ylim=c(-18, -3))
abline(0,1)
## Compare dO_P from OIPC and model
precipcomp <- merge.data.frame(precipcomp, sites, by.x="Site", by.y="Site")
plot(precipcomp$d18O_Model ~ precipcomp$d18O_OIPC, xlim=c(-18, -3), ylim=c(-18, -3))
abline(0,1)
c = ceiling((precipcomp$map.wc / max(precipcomp$map.wc)) * 5)
pal = rainbow(5)
layout(matrix(c(1,2), 1, 2, byrow=T))
plot(precipcomp$d18O_Model, precipcomp$d18O_OIPC, pch=16, col=pal[c], xlim=c(-18,-3), ylim=c(-18,-3),
xlab=expression(paste("OIPC ",delta^{18}, "O (\u2030)")),
ylab=expression(paste("Model ",delta^{18}, "O (\u2030)")))
points(precipcomp$d18O_Model, precipcomp$d18O_OIPC, pch=1)
abline(0,1)
plot(precipcomp$d18O_Model ~ precipcomp$d18O_OIPC, pch=16, col=pal[c], xlim=c(-18,-3), ylim=c(-18,-3),
xlab=expression(paste("OIPC ",delta^{18}, "O (\u2030)")),
ylab=expression(paste("Model ",delta^{18}, "O (\u2030)")))
plot(precipcomp$d18O_Model ~ precipcomp$d18O_OIPC, pch=16, col=pal[c], xlim=c(-18,-3), ylim=c(-18,-3),
xlab=expression(paste("OIPC ",delta^{18}, "O (\u2030)")),
ylab=expression(paste("Model ",delta^{18}, "O (\u2030)")))
points(precipcomp$d18O_Model, precipcomp$d18O_OIPC, pch=1)
abline(0,1)
layout(matrix(c(1,2), 1, 2, byrow=T))
plot(precipcomp$d18O_Model ~ precipcomp$d18O_OIPC, pch=16, col=pal[c], xlim=c(-18,-3), ylim=c(-18,-3),
xlab=expression(paste("OIPC ",delta^{18}, "O (\u2030)")),
ylab=expression(paste("Model ",delta^{18}, "O (\u2030)")))
points(precipcomp$d18O_Model ~ precipcomp$d18O_OIPC, pch=1)
abline(0,1)
dev.off()
plot(precipcomp$d18O_Model ~ precipcomp$d18O_OIPC, pch=16, col=pal[c], xlim=c(-18,-3), ylim=c(-18,-3),
xlab=expression(paste("OIPC ",delta^{18}, "O (\u2030)")),
ylab=expression(paste("Model ",delta^{18}, "O (\u2030)")))
points(precipcomp$d18O_Model ~ precipcomp$d18O_OIPC, pch=1)
abline(0,1)
#extract relevant values at sites
precipcomp <- read.csv("valsites_sel_d18O_P.csv")
View(precipcomp)
View(precipcomp)
plot(precipcomp$d18O_Model_ann ~ precipcomp$d18O_OIPC_jja, xlim=c(-18, -3), ylim=c(-18, -3))
abline(0,1)
plot(precipcomp$d18O_Model_ann ~ precipcomp$d18O_OIPC_mam, xlim=c(-18, -3), ylim=c(-18, -3))
abline(0,1)
plot(precipcomp$d18O_Model_ann ~ precipcomp$d18O_OIPC_son, xlim=c(-18, -3), ylim=c(-18, -3))
abline(0,1)
plot(precipcomp$d18O_Model_ann ~ precipcomp$d18O_OIPC_djf, xlim=c(-18, -3), ylim=c(-18, -3))
abline(0,1)
plot(precipcomp$d18O_Model_ann ~ precipcomp$d18O_OIPC_ann, xlim=c(-18, -3), ylim=c(-18, -3))
abline(0,1)
c = ceiling((precipcomp$map.wc / max(precipcomp$map.wc)) * 5)
pal = rainbow(5)
## Compare dO_P from OIPC and model
precipcomp <- merge.data.frame(precipcomp, sites, by.x="Site", by.y="Site")
c = ceiling((precipcomp$map.wc / max(precipcomp$map.wc)) * 5)
pal = rainbow(5)
layout(matrix(c(1,2), 1, 2, byrow=T))
plot(precipcomp$d18O_Model ~ precipcomp$d18O_OIPC, pch=16, col=pal[c], xlim=c(-18,-3), ylim=c(-18,-3),
xlab=expression(paste("OIPC ",delta^{18}, "O (\u2030)")),
ylab=expression(paste("Model ",delta^{18}, "O (\u2030)")))
points(precipcomp$d18O_Model ~ precipcomp$d18O_OIPC, pch=1)
abline(0,1)
plot(precipcomp$d18O_Model_ann ~ precipcomp$d18O_OIPC_ann, pch=16, col=pal[c], xlim=c(-18,-3), ylim=c(-18,-3),
xlab=expression(paste("OIPC ",delta^{18}, "O (\u2030)")),
ylab=expression(paste("Model ",delta^{18}, "O (\u2030)")))
points(precipcomp$d18O_Model_ann ~ precipcomp$d18O_OIPC_ann, pch=1)
abline(0,1)
dev.off()
plot(precipcomp$d18O_Model_ann ~ precipcomp$d18O_OIPC_ann, pch=16, col=pal[c], xlim=c(-18,-3), ylim=c(-18,-3),
xlab=expression(paste("OIPC ",delta^{18}, "O (\u2030)")),
ylab=expression(paste("Model ",delta^{18}, "O (\u2030)")))
points(precipcomp$d18O_Model_ann ~ precipcomp$d18O_OIPC_ann, pch=1)
abline(0,1)
plot(precipcomp$d18O_Model_ann ~ precipcomp$d18O_OIPC_jja, pch=16, col=pal[c], xlim=c(-18,-3), ylim=c(-18,-3),
xlab=expression(paste("OIPC ",delta^{18}, "O (\u2030)")),
ylab=expression(paste("Model ",delta^{18}, "O (\u2030)")))
points(precipcomp$d18O_Model_ann ~ precipcomp$d18O_OIPC_ann, pch=1)
abline(0,1)
plot(precipcomp$d18O_Model_ann ~ precipcomp$d18O_OIPC_jja, pch=16, col=pal[c], xlim=c(-18,-3), ylim=c(-18,-3),
xlab=expression(paste("OIPC ",delta^{18}, "O (\u2030)")),
ylab=expression(paste("Model ",delta^{18}, "O (\u2030)")))
points(precipcomp$d18O_Model_ann ~ precipcomp$d18O_OIPC_jja, pch=1)
abline(0,1)
plot(precipcomp$d18O_Model_ann ~ precipcomp$d18O_OIPC_mam, pch=16, col=pal[c], xlim=c(-18,-3), ylim=c(-18,-3),
xlab=expression(paste("OIPC ",delta^{18}, "O (\u2030)")),
ylab=expression(paste("Model ",delta^{18}, "O (\u2030)")))
points(precipcomp$d18O_Model_ann ~ precipcomp$d18O_OIPC_mam, pch=1)
abline(0,1)
plot(precipcomp$d18O_Model_ann ~ precipcomp$d18O_OIPC_son, pch=16, col=pal[c], xlim=c(-18,-3), ylim=c(-18,-3),
xlab=expression(paste("OIPC ",delta^{18}, "O (\u2030)")),
ylab=expression(paste("Model ",delta^{18}, "O (\u2030)")))
points(precipcomp$d18O_Model_ann ~ precipcomp$d18O_OIPC_son, pch=1)
abline(0,1)
plot(precipcomp$d18O_Model_ann ~ precipcomp$d18O_OIPC_djf, pch=16, col=pal[c], xlim=c(-18,-3), ylim=c(-18,-3),
xlab=expression(paste("OIPC ",delta^{18}, "O (\u2030)")),
ylab=expression(paste("Model ",delta^{18}, "O (\u2030)")))
points(precipcomp$d18O_Model_ann ~ precipcomp$d18O_OIPC_djf, pch=1)
abline(0,1)
legend("bottomright", title = "MAP (mm)", fill=rainbow(5), legend=c("0 - 136", "136 - 272", "272 - 408" , "408 - 544", "544 - 680"))
## Compare dO_P from OIPC and model
precipcomp <- merge.data.frame(precipcomp, hq.comp, by.x="Site", by.y="Site")
View(precipcomp)
